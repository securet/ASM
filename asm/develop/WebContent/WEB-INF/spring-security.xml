<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd ">

	<bean id="bcryptEncoder" name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<bean id="secureTAuthenticationSuccessHandler" class="com.securet.ssm.components.authentication.SecureTAuthenticationSuccessHandler"></bean>

	<security:http pattern="/rest/**"  authentication-manager-ref="authenticationManager" entry-point-ref="restServicesEntryPoint" create-session="stateless">
		<security:custom-filter ref="restServicesFilter" before="PRE_AUTH_FILTER" />
		<!-- access denied page -->
		<security:access-denied-handler error-page="/error/json/403" />
	</security:http>
	
	<!-- Entry point for REST service. -->
	<bean id="restServicesEntryPoint" class="com.securet.ssm.spring.rest.RestAuthenticationEntryPoint" />
	
	<!-- Filter for REST services. -->
	<bean id="restServicesFilter" class="com.securet.ssm.spring.rest.RestUsernamePasswordAuthenticationFilter">
		<property name="postOnly" value="false" />
		<property name="authenticationManager" ref="authenticationManager" />
		<property name="authenticationSuccessHandler" ref="restServicesSuccessHandler" />
	</bean>
	
	<!-- A handler for successful REST service authentication. -->
	<bean id="restServicesSuccessHandler" class="com.securet.ssm.spring.rest.RestAuthenticationSuccessHandler" />
	
	<!-- enable use-expressions -->
	<security:http auto-config="true" pattern="/**" use-expressions="true" name="securet"  authentication-manager-ref="authenticationManager">
		<security:intercept-url pattern="/error/**" access="permitAll" />
   		<security:intercept-url pattern="/assets/**" access="permitAll" />
		<security:intercept-url pattern="/uploads/**" access="permitAll" />
		<security:intercept-url pattern="/content/**" access="permitAll" />
		<security:intercept-url pattern="/admin/**" access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/tickets/**" access="hasAnyRole('ADMIN','CLIENT_USER','RESOLVER','CLIENT_CONTROLLER')" />
		<security:intercept-url pattern="/user/**" access="hasAnyRole('ADMIN','CLIENT_USER','RESOLVER','CLIENT_CONTROLLER')" />
		<security:intercept-url pattern="/reports/**" access="hasAnyRole('ADMIN','CLIENT_CONTROLLER')" />

		<!-- access denied page -->
		<security:access-denied-handler error-page="/error/403" />

		<security:form-login login-page="/login" authentication-success-handler-ref="secureTAuthenticationSuccessHandler" authentication-failure-url="/login?error" username-parameter="username" password-parameter="password" />
		<security:logout logout-success-url="/login?logout" />
		<!-- enable csrf protection -->
		<security:csrf />
	</security:http>

	<!-- Select users and user_roles from database -->
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider>
			<security:password-encoder ref="bcryptEncoder" />
			<security:jdbc-user-service data-source-ref="dataSource" users-by-username-query="select userId username,password, enabled from user_login where userId=?" 
			    authorities-by-username-query="SELECT ur.User_userId username, rt.roleType role FROM user_role ur INNER JOIN role_type rt ON ur.roles_roleTypeId=roleTypeId WHERE ur.User_userId =?  " />
		</security:authentication-provider>
	</security:authentication-manager>

	<security:global-method-security secured-annotations="enabled" jsr250-annotations="enabled" pre-post-annotations="enabled">
	</security:global-method-security>
	
</beans>	
