apply plugin: 'java'
apply plugin: 'war' 
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot'

project.webAppDirName='develop/webapp'

buildscript {
	buildDir "develop/build"
	ext {
		entityPackage = "com.securet.ssm.persistence.objects"
		sqlEntityPackage = "com.securet.ssm.persistence.objects.querydsl.sql"

		projectResourcesDirs = 'develop/config'
		projectSourceDirs = 'develop/src/main'
		generatedSourcesDir = "develop/src/generated"
		buildOutputDir='develop/build/classes'

		deploymentDir="deploy/asm"	
		//projectWebappDir = 
		
		sqlConnectionUrl = "jdbc:mysql://localhost:3306/asm_localserver_20150508"
		sqlUserName='asm'
		sqlPassword='shabhu'
	
		querydslVersion = "3.6.3"
	}
    repositories {
        mavenCentral()
    }
    dependencies {
		classpath("com.mysema.querydsl:querydsl-codegen:${querydslVersion}")
		classpath("com.mysema.querydsl:querydsl-sql-codegen:${querydslVersion}")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.3.RELEASE")
		classpath('javax.persistence:persistence-api:1.0.2')
		classpath('mysql:mysql-connector-java:5.1.34')
    }
}



sourceSets {
    main {
        java {
            srcDirs = [generatedSourcesDir, projectSourceDirs]
        }
        resources {
            srcDir projectResourcesDirs
        }
	    output.classesDir buildOutputDir
	    output.resourcesDir buildOutputDir
    }
    generated {
        java {
            srcDirs = [generatedSourcesDir]
        }
    }
}


eclipse {
	classpath{
		defaultOutputDir file(buildOutputDir)
	}
	
	/*wtp{
		component {
			//sourceDirs += file(generatedSourcesDir)
		}
	}*/
}


bootRepackage {
	mainClass = 'com.securet.ssm.persistence.objects.Geo'
}

configurations {
    querydslapt
    mysqlDriver
}

/*
task generateQueryDSLJPA( group: 'build', description: 'Generate QueryDSL') {
	doFirst{	
		println 'start JPA export'
		com.mysema.query.codegen.GenericExporter exporter = new com.mysema.query.codegen.GenericExporter()
	    exporter.setKeywords(com.mysema.query.codegen.Keywords.JPA)
	    exporter.setNamePrefix("JPA")
	    exporter.setEntityAnnotation(javax.persistence.Entity.class)
	    exporter.setEmbeddableAnnotation(javax.persistence.Embeddable.class)
	    exporter.setEmbeddedAnnotation(javax.persistence.Embedded.class)
	    exporter.setSupertypeAnnotation(javax.persistence.MappedSuperclass.class)
	    exporter.setSkipAnnotation(javax.persistence.Transient.class)
	    exporter.setTargetFolder(sourceSets.generated.java.srcDirs.iterator().next())
	    exporter.export(entityPackage)
		println 'end JPA export'
	}
}  
*/


task generateQueryDSLSQL( group: 'build', description: 'Generates the QueryDSL SQL query types') {
    // Load MySQL Driver
 	doFirst{
	    configurations.mysqlDriver.each {
	      groovy.sql.Sql.classLoader.addURL(it.toURI().toURL())
	    }
		java.sql.DriverManager.registerDriver(groovy.sql.Sql.classLoader.loadClass("com.mysql.jdbc.Driver").newInstance())
	    // Create classes for Querydsl
	    groovy.sql.Sql sql = groovy.sql.Sql.newInstance(sqlConnectionUrl,
	      sqlUserName,
	      sqlPassword,
	      'com.mysql.jdbc.Driver')
	    com.mysema.query.sql.codegen.MetaDataExporter exporter = new com.mysema.query.sql.codegen.MetaDataExporter();
	    exporter.setPackageName(sqlEntityPackage)
	    exporter.setNamePrefix('SQL')
	    exporter.setTargetFolder(sourceSets.generated.java.srcDirs.iterator().next())
	    exporter.export(sql.getConnection().getMetaData())
	}
}

task generateQueryDSLJPA(type: JavaCompile, group: 'build', description: 'Generates the QueryDSL JPA query types') {
	dependsOn generateQueryDSLSQL
    source = sourceSets.main.java
    classpath = configurations.compile + configurations.querydslapt
    options.compilerArgs = [
            "-proc:only",
            "-processor", "com.mysema.query.apt.jpa.JPAAnnotationProcessor",
            "-Aquerydsl.prefix=JPA",
            "-Aquerydsl.packageSuffix=.querydsl.jpa"
    ]
    destinationDir = sourceSets.generated.java.srcDirs.iterator().next()
}

task cleanDSLGeneratedSources( group: 'build', description: 'Cleanes the QueryDSL query types') {
	delete 'develop/src/generated/com'//filetree(dir: generatedSourcesDir).include('**/*')
}

task generateQueryDSL( group: 'build', description: 'Generates the QueryDSL query types') {
	dependsOn cleanDSLGeneratedSources, generateQueryDSLSQL, generateQueryDSLJPA
}

compileJava {
	dependsOn generateQueryDSLJPA
	//compileJava.source sourceSets.generated.java.srcDirs.iterator().next()//, sourceSets.main.java
    //dependsOn generateQueryDSLJPA
    //source sourceSets.generated.java.srcDirs.iterator().next()
}//.dependsOn(generateQueryDSL) 

/*
war {
    from webAppDirName
}
*/

task explodedWar(type: Copy) {
	delete deploymentDir 
    into deploymentDir     
    with war 
}
explodedWar.shouldRunAfter war
war.dependsOn explodedWar


repositories {
  mavenCentral()
  maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

dependencies {
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	runtime 'javax.servlet:jstl:1.1.2'

	//Spring Dependencies
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework:spring-webmvc:4.1.2.RELEASE')
	compile('org.springframework:spring-context-support:4.1.2.RELEASE')
	compile('org.springframework:spring-webmvc-portlet:4.1.2.RELEASE')
	compile('org.springframework.security:spring-security-config:3.2.5.RELEASE')
 	compile('org.springframework.security:spring-security-web:3.2.5.RELEASE')
	compile ('org.springframework.security:spring-security-taglibs:3.2.5.RELEASE')
	compile ('org.springframework:spring-tx:4.1.2.RELEASE')

	//Hibernate Dependencies
 	compile(group: 'org.hibernate', name: 'hibernate-core', version: '4.3.7.Final')
 	compile(group: 'org.hibernate', name: 'hibernate-entitymanager', version: '4.3.7.Final')
 	compile(group: 'org.hibernate.common', name: 'hibernate-commons-annotations', version: '4.0.5.Final')
 	compile(group: 'org.hibernate', name: 'hibernate-validator', version: '5.0.1.Final')

 	compile('javax.validation:validation-api:1.0.0.GA')

 	compile('joda-time:joda-time:2.7')
	
	//HTTP client
 	compile('org.apache.httpcomponents:httpcore:4.3.3')
 	compile('org.apache.httpcomponents:httpclient:4.3.6')
 	compile ('org.apache.httpcomponents:httpmime:4.3.6')
 	compile('commons-codec:commons-codec:1.6')
 	compile('commons-logging:commons-logging:1.2')
	compile('commons-io:commons-io:2.4')
	compile('commons-dbcp:commons-dbcp:1.2.2')
 	
 	//jackson json parsers
 	compile('com.fasterxml.jackson.core:jackson-core:2.4.3')
 	compile('com.fasterxml.jackson.core:jackson-annotations:2.4.3')
 	compile('com.fasterxml.jackson.core:jackson-databind:2.4.3')
 	compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate4:2.4.6')
	compile('com.fasterxml:classmate:0.8.0')
 	
	compile('org.freemarker:freemarker:2.3.22')

	//Query DSL
	compile('com.mysema.querydsl:querydsl-core:3.6.3')
	compile('com.mysema.querydsl:querydsl-jpa:3.6.3')
	compile('com.mysema.querydsl:querydsl-sql:3.6.3')

	//Mail 
	compile ('javax.mail:mail:1.4.7')
	compile('javax.activation:activation:1.1.1')

	//Logging SLF4J    
	compile ('org.slf4j:slf4j-api:1.7.7')
	compile ('org.apache.logging.log4j:log4j-api:2.1')
	compile ('org.apache.logging.log4j:log4j-core:2.1')
	compile ('org.slf4j:log4j-over-slf4j:1.7.7')
	compile ('org.apache.logging.log4j:log4j-slf4j-impl:2.1')

	//commons file upload 
 	compile('commons-fileupload:commons-fileupload:1.3.1')
	compile('antlr:antlr:2.7.7')
    
	compile ('opensymphony:sitemesh:2.4.2')
	compile ('com.google.guava:guava:18.0')
	compile ('dom4j:dom4j:1.6.1')

	querydslapt "com.mysema.querydsl:querydsl-apt:3.6.3"
	mysqlDriver 'mysql:mysql-connector-java:5.1.34'
    testCompile("junit:junit")
    compile 'mysql:mysql-connector-java:5.1.34'
    
/*	compile('ch.qos.logback:logback-classic:1.1.3') {
  		exclude group: 'org.slf4j', module: 'slf4j-api' //by both name and group
 	}
 	
	compile('ch.qos.logback:logback-classic:1.1.3') {
  		exclude group: 'org.slf4j', module: 'slf4j-api' //by both name and group
 	}
 */	
}